WAComponent subclass: #AccessComponent	instanceVariableNames: 'email password'	classVariableNames: ''	package: 'TP1-UI'!!AccessComponent methodsFor: 'model' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:25'!modelo	^ Cuoora soleInstance ! !!AccessComponent methodsFor: 'accessing' stamp: 'hd 4/13/2020 09:19'!email: unEmail	email := unEmail! !!AccessComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:29'!password 	^ password ! !!AccessComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:29'!password: unaPassword	password := unaPassword ! !!AccessComponent methodsFor: 'accessing' stamp: 'hd 4/13/2020 09:18'!email	^ email! !!AccessComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:16'!renderContentOn: unCanvas	unCanvas heading: 'Cuoora'.	unCanvas horizontalRule.	unCanvas		form: [ self renderizarDatosEn: unCanvas.			self renderizarBotonesEn: unCanvas ]! !!AccessComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:49'!renderizarDatosEn: unCanvas	unCanvas label: 'Email'.	unCanvas paragraph: [ unCanvas textInput on: #email of: self ].	unCanvas label: 'Password'.	unCanvas paragraph: [ unCanvas passwordInput on: #password of: self ]! !!AccessComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:33'!renderizarBotonesEn: unCanvas	self subclassResponsibility ! !!AccessComponent methodsFor: 'private ' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:27'!accederConUsuario: unUsuario	self session usuario: unUsuario.	self call: CuooraHomeComponent new! !WAComponent subclass: #ComunComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-UI'!!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 20:57'!renderizarTopicos: unosTopicos En: unCanvas	unCanvas emphasis: 'Topicos: '.	unosTopicos do: [ :each | self renderizarTopico: each En: unCanvas ].	unCanvas break.! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:23'!renderizarLikesyDislikesDe: unaPublicacion En: unCanvas.	unCanvas strong: unaPublicacion likes;		strong:' Likes | ';	strong: unaPublicacion dislikes;	strong:' Dislikes'.	unCanvas break! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:09'!renderizarBotonLogOutEn: unCanvas	unCanvas anchor 		callback: [ self show: CuooraLoginComponent new ];		with: [ unCanvas button with: 'Cerrar Sesion' ]	! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:36'!renderizarPregunta: unaPregunta En: unCanvas	unCanvas anchor		callback: [ self detalleDePregunta: unaPregunta ];		with: unaPregunta titulo.	unCanvas break.	unCanvas paragraph: unaPregunta texto.	self renderizarTopicos: (unaPregunta topicos) En: unCanvas.	unCanvas emphasis: 'Autor: '.	unCanvas anchor		callback: [ self perfilDeUsuario: unaPregunta usuario ];		with: unaPregunta usuario nombre.	unCanvas		text: ' | ';		text: unaPregunta respuestas size;		text: ' respuestas'.	unCanvas break.	self renderizarLikesyDislikesDe: unaPregunta En: unCanvas.	self renderizarReaccionesPara: unaPregunta En: unCanvas.	unCanvas horizontalRule	! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:36'!perfilDeUsuario: unUsuario	self show: (PerfilDeUsuarioComponent deUsuario: unUsuario)! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:29'!detalleDePregunta: unaPregunta	self show: (DetalleDePreguntaComponent dePregunta: unaPregunta)! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:05'!renderizarReaccionesPara: unaPublicacion En: unCanvas	unCanvas anchor		callback: [ unaPublicacion agregarLikeDeUsuario: self session usuario];		with: [ unCanvas button: ' Like ' ].	unCanvas strong: ' | '.	unCanvas anchor		callback: [ unaPublicacion agregarDislikeDeUsuario: self session usuario];		with: [ unCanvas button: ' Dislike ' ].! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:24'!preguntasDeTopico: unTopico	self show: (PreguntasDeTopicoComponent deTopico: unTopico)! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:49'!renderizarBarraSuperiorEn: unCanvas	unCanvas anchor		callback: [ self show: CuooraHomeComponent new];		with: 'Home'.	unCanvas space.	self renderizarBotonLogOutEn: unCanvas.	unCanvas break! !!ComunComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:24'!renderizarTopico: unTopico En: unCanvas	unCanvas emphasis: 		[ unCanvas anchor 			callback: [self preguntasDeTopico: unTopico];			with: unTopico nombre].	unCanvas space! !ComunComponent subclass: #CuooraHomeComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-UI'!!CuooraHomeComponent methodsFor: 'callback' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:54'!crearPregunta	self call: NuevaPreguntaComponent new	! !!CuooraHomeComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:59'!renderizarBotonNuevaPreguntaEn: unCanvas	unCanvas anchor 		callback: [ self crearPregunta ];		with: [ unCanvas button: 'Nueva Pregunta' ]! !!CuooraHomeComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:20'!renderizarPreguntasRelevantesEn: unCanvas	| preguntasRelevantes |	preguntasRelevantes := Cuoora soleInstance getPreguntasRelevantesDeUsuario: self session usuario.	preguntasRelevantes := preguntasRelevantes asSortedCollection: [ :a :b | a fechaCreacion > b fechaCreacion ].	preguntasRelevantes size > 5		ifTrue: [ preguntasRelevantes := preguntasRelevantes first: 5 ].	preguntasRelevantes do: [ :each | self renderizarPregunta: each En: unCanvas ]! !!CuooraHomeComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:48'!renderizarBotonMiPerfilEn: unCanvas	unCanvas anchor 		callback: [ self perfilDeUsuario: self session usuario ];		with: [ unCanvas button: 'Mi Perfil' ]! !!CuooraHomeComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 18:49'!renderContentOn: unCanvas	self renderizarBarraSuperiorEn: unCanvas.	unCanvas heading: 'Bienvenido a Cuoora, ', self session usuario nombre.	self renderizarBotonNuevaPreguntaEn: unCanvas.	unCanvas space.	self renderizarBotonMiPerfilEn: unCanvas.	unCanvas horizontalRule.	self renderizarPreguntasRelevantesEn: unCanvas.! !AccessComponent subclass: #CuooraLoginComponent	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-UI'!!CuooraLoginComponent commentStamp: 'MariaNoelAdrogueBenas 4/14/2020 00:36' prior: 0!| application |application := WAAdmin register: CuooraLoginComponent asApplicationAt: 'cuoora'.application sessionClass: SesiondeUsuario.!!CuooraLoginComponent methodsFor: 'callbacks' stamp: 'MariaNoelAdrogueBenas 4/13/2020 21:21'!clear	Cuoora clearSoleInstance! !!CuooraLoginComponent methodsFor: 'callbacks' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:42'!registrarUsuario	self call: RegistroComponent new! !!CuooraLoginComponent methodsFor: 'callbacks' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:52'!login 	(self modelo buscarUsuarioConEmail: email yPassword: password)		ifNotNil: [ :it | self accederConUsuario: it].	email := nil.	password := nil.! !!CuooraLoginComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:39'!renderizarBotonesRegistroEn: unCanvas	unCanvas submitButton		callback: [ self registrarUsuario ];		with: 'Registrarse'! !!CuooraLoginComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:15'!renderizarBotonesLogInEn: unCanvas	unCanvas submitButton 		callback: [ self login ];		with: 'Iniciar Sesion'.! !!CuooraLoginComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:37'!renderizarBotonesEn: unCanvas	self renderizarBotonesLogInEn: unCanvas.	unCanvas horizontalRule.	unCanvas paragraph: 'Aun no registrado?'.	self renderizarBotonesRegistroEn: unCanvas! !ComunComponent subclass: #DetalleDePreguntaComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	package: 'TP1-UI'!!DetalleDePreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:12'!pregunta	^ pregunta! !!DetalleDePreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:12'!pregunta: unaPregunta	pregunta := unaPregunta ! !!DetalleDePreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:27'!renderizarRespuesta: unaRespuesta En: unCanvas	unCanvas strong: 'Respuesta de '.	unCanvas anchor 		callback: [ self perfilDeUsuario: unaRespuesta usuario];		with: (unaRespuesta usuario nombre).	unCanvas break.	unCanvas paragraph: unaRespuesta texto.	self renderizarLikesyDislikesDe: unaRespuesta En: unCanvas.	self renderizarReaccionesPara: unaRespuesta En: unCanvas.	unCanvas horizontalRule! !!DetalleDePreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:20'!nuevaRespuesta	self call: (NuevaRespuestaComponent aPregunta: pregunta)! !!DetalleDePreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:44'!renderContentOn: unCanvas	self renderizarBarraSuperiorEn: unCanvas.	unCanvas heading: pregunta titulo.	self renderizarTopicos: (pregunta topicos) En: unCanvas.	unCanvas emphasis: 'Autor: '.	unCanvas anchor		callback: [ self perfilDeUsuario: pregunta usuario ];		with: pregunta usuario nombre.	unCanvas		text: ' | ';		text: pregunta respuestas size;		text: ' respuestas'.	unCanvas break.	unCanvas horizontalRule.	unCanvas paragraph: pregunta texto.	self renderizarLikesyDislikesDe: pregunta En: unCanvas.	self renderizarReaccionesPara: pregunta En: unCanvas.	unCanvas horizontalRule.	self renderizarRespuestasEn: unCanvas.	self renderizarBarraInferiorEn: unCanvas ! !!DetalleDePreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:55'!renderizarRespuestasEn: unCanvas	(self pregunta respuestas) do:		[ :each | self renderizarRespuesta: each En: unCanvas ]! !!DetalleDePreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:28'!renderizarBarraInferiorEn: unCanvas 	unCanvas text: 'No hay mas respuestas'.	unCanvas break.	unCanvas anchor		callback: [ self nuevaRespuesta ];		with: [ unCanvas button: ' Agregar Respuesta ' ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DetalleDePreguntaComponent class	instanceVariableNames: ''!!DetalleDePreguntaComponent class methodsFor: 'as yet unclassified' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:12'!dePregunta: unaPregunta	| detalle |	detalle := self new.	detalle pregunta: unaPregunta.	^ detalle! !ComunComponent subclass: #NuevaPreguntaComponent	instanceVariableNames: 'titulo descripcion topicos'	classVariableNames: ''	package: 'TP1-UI'!!NuevaPreguntaComponent methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 4/13/2020 21:51'!initialize	topicos := OrderedCollection new! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:10'!descripcion: unaDescripcion	descripcion := unaDescripcion ! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 21:52'!agregarTopico: unTopico	| topico |	topico := Cuoora soleInstance buscarTopicoConNombre: unTopico.	(topicos includes: topico)	ifFalse: [topicos add: topico.].! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:10'!titulo: unTitulo	titulo := unTitulo ! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:12'!topicos: unosTopicos	topicos := unosTopicos ! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:13'!topicos	^ topicos! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:10'!descripcion	^ descripcion ! !!NuevaPreguntaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:10'!titulo	^ titulo! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 19:14'!renderContentOn: unCanvas	self renderizarBarraSuperiorEn: unCanvas.	unCanvas heading: 'Nueva Pregunta'.	unCanvas form: [ 		unCanvas label: [unCanvas strong: 'Titulo *'].		unCanvas paragraph: [ unCanvas textInput on: #titulo of: self].		unCanvas label: [unCanvas strong: 'Topicos *'].		self renderizarListaTopicosEn: unCanvas.		unCanvas orderedList: [        topicos do: [ :each | unCanvas listItem: each nombre] ].		unCanvas label: [unCanvas strong: 'Descripcion'].		unCanvas paragraph: [ (unCanvas textArea on: #descripcion of: self)			columns: 80;			rows: 5 ].		unCanvas submitButton 			callback: [ self nuevaPregunta ];			with: 'Crear Pregunta'.			unCanvas space.		unCanvas submitButton 			callback: [ self cancelar ];			with: 'Cancelar' ].		unCanvas paragraph: [ unCanvas emphasis: '*: Campo obligatorio' ]! !!NuevaPreguntaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:33'!renderizarListaTopicosEn: unCanvas	| topicoActual |	unCanvas paragraph: [ unCanvas select 		list: (Cuoora soleInstance topicos collect: [:each | each nombre]);		callback: [ :value | topicoActual:= value ].	unCanvas space.	unCanvas submitButton		callback: [ self agregarTopico: topicoActual ];		with: 'Agregar topico'].	! !!NuevaPreguntaComponent methodsFor: 'callback' stamp: 'MariaNoelAdrogueBenas 4/14/2020 19:05'!nuevaPregunta	self titulo isNotEmpty		& (self topicos isNotEmpty)		ifFalse: [ self cancelar ].	self session usuario		crearPreguntaParaTopicos: topicos		conTitulo: titulo		YDescripcion: descripcion.	self answer! !!NuevaPreguntaComponent methodsFor: 'callback' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:32'!cancelar	self titulo: nil.	self topicos: nil.	self descripcion: nil.	self answer! !ComunComponent subclass: #NuevaRespuestaComponent	instanceVariableNames: 'pregunta texto'	classVariableNames: ''	package: 'TP1-UI'!!NuevaRespuestaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:12'!texto: unTexto	texto := unTexto! !!NuevaRespuestaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:12'!pregunta	^ pregunta! !!NuevaRespuestaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:12'!pregunta: unaPregunta	pregunta := unaPregunta ! !!NuevaRespuestaComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:12'!texto	^ texto! !!NuevaRespuestaComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 19:18'!renderContentOn: unCanvas	unCanvas heading: 'Nueva Respuesta'.	unCanvas strong: 'A: '.	unCanvas emphasis: [ unCanvas anchor		callback: [ self detalleDePregunta: pregunta ];		with: pregunta titulo].	unCanvas break. 	unCanvas		form: [ unCanvas label: [unCanvas strong: 'Respuesta *'].		unCanvas paragraph: [ (unCanvas textArea on: #texto of: self)			columns: 80;			rows: 5 ].		unCanvas submitButton 			callback: [ self nuevaRespuesta ];			with: 'Agregar Respuesta'.			unCanvas space.		unCanvas submitButton 			callback: [ self cancelar ];			with: 'Cancelar' ].		unCanvas paragraph: [ unCanvas emphasis: '*: Campo obligatorio' ]! !!NuevaRespuestaComponent methodsFor: 'callback' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:36'!nuevaRespuesta	(self texto isNotEmpty)		ifFalse: [ self cancelar ].	self pregunta crearRespuestaDeUsuario: self session usuario conTexto: texto.	self answer! !!NuevaRespuestaComponent methodsFor: 'callback' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:14'!cancelar	pregunta := nil.	texto := nil.	self answer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NuevaRespuestaComponent class	instanceVariableNames: ''!!NuevaRespuestaComponent class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/14/2020 00:15'!aPregunta: unaPregunta	|respuesta|	respuesta := self new.	respuesta pregunta: unaPregunta.	^ respuesta! !ComunComponent subclass: #PerfilDeUsuarioComponent	instanceVariableNames: 'usuario'	classVariableNames: ''	package: 'TP1-UI'!!PerfilDeUsuarioComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:04'!renderizarPreguntasEn: unCanvas	self usuario preguntas do: [ :each | self renderizarPregunta: each En: unCanvas ]! !!PerfilDeUsuarioComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:42'!renderContentOn: unCanvas	self renderizarBarraSuperiorEn: unCanvas.	unCanvas heading: 'Perfil de ', self usuario nombre.	(self session usuario esSeguible: self usuario)	ifTrue: [ unCanvas anchor		callback: [ self session usuario agregarSeguido: (self usuario) ];		with: [unCanvas button with: 'Seguir'.]].	unCanvas break.	unCanvas strong: 'Puntuacion de ', self usuario nombre, ': ', (Cuoora soleInstance calcularPuntajeDeUsuario: self usuario) printString.	unCanvas horizontalRule.	self renderizarPreguntasEn: unCanvas ! !!PerfilDeUsuarioComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:52'!usuario: unUsuario 	usuario := unUsuario! !!PerfilDeUsuarioComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:52'!usuario	^ usuario! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilDeUsuarioComponent class	instanceVariableNames: ''!!PerfilDeUsuarioComponent class methodsFor: 'as yet unclassified' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:51'!deUsuario: unUsuario 	| perfilDeUsuario |	perfilDeUsuario := self new.	perfilDeUsuario usuario: unUsuario.	^ perfilDeUsuario! !ComunComponent subclass: #PreguntasDeTopicoComponent	instanceVariableNames: 'topico preguntas'	classVariableNames: ''	package: 'TP1-UI'!!PreguntasDeTopicoComponent methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:15'!initialize 	preguntas := OrderedCollection new! !!PreguntasDeTopicoComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:10'!topico	^ topico! !!PreguntasDeTopicoComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:16'!preguntas: unasPreguntas	preguntas := unasPreguntas! !!PreguntasDeTopicoComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:10'!topico: unTopico	topico := unTopico! !!PreguntasDeTopicoComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:16'!preguntas	^ preguntas! !!PreguntasDeTopicoComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:26'!renderContentOn: unCanvas	self renderizarBarraSuperiorEn: unCanvas.	unCanvas heading: 'Topico: ', topico nombre.	unCanvas paragraph: [ unCanvas emphasis: topico descripcion ].	unCanvas strong: 'Preguntas con Topico ', topico nombre.	unCanvas break.	unCanvas horizontalRule.	(preguntas do: [:each | self renderizarPregunta: each En: unCanvas ])! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PreguntasDeTopicoComponent class	instanceVariableNames: ''!!PreguntasDeTopicoComponent class methodsFor: 'as yet unclassified' stamp: 'MariaNoelAdrogueBenas 4/13/2020 22:19'!deTopico: unTopico 	| preguntasDeTopico |	preguntasDeTopico := self new.	preguntasDeTopico topico: unTopico.	preguntasDeTopico preguntas: (Cuoora soleInstance getPreguntasDeTopico: unTopico).	^ preguntasDeTopico! !AccessComponent subclass: #RegistroComponent	instanceVariableNames: 'nombre'	classVariableNames: ''	package: 'TP1-UI'!!RegistroComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:51'!nombre 	^ nombre! !!RegistroComponent methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:51'!nombre: unNombre	nombre := unNombre ! !!RegistroComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 19:08'!renderizarDatosEn: unCanvas	unCanvas label: 'Nombre'.	unCanvas paragraph: [ unCanvas textInput on: #nombre of: self ].	super renderizarDatosEn: unCanvas.	unCanvas paragraph: [ unCanvas emphasis: 'Luego de registrarse debera iniciar sesion con su email y password.' ].		unCanvas paragraph: [ unCanvas emphasis: 'Todos los campos son obligatorios.' ].! !!RegistroComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:15'!renderizarBotonesRegistroEn: unCanvas	unCanvas submitButton 		callback: [ self registrarse ];		with: 'Registrarse'.	unCanvas space.	unCanvas submitButton 		callback: [ self cancelar ];		with: 'Cancelar'! !!RegistroComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:43'!renderizarBotonesEn: unCanvas	self renderizarBotonesRegistroEn: unCanvas! !!RegistroComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/14/2020 19:12'!registrarse	self email isNotEmpty		& self nombre isNotEmpty		& self password isNotEmpty	ifFalse: [ self cancelar ].	self modelo crearUsuarioConNombre: nombre yEmail: email yPassword: password.	self show: CuooraLoginComponent new! !!RegistroComponent methodsFor: 'rendering' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:14'!cancelar	nombre:= nil.	email := nil.	password := nil.	self answer! !WASession subclass: #SesiondeUsuario	instanceVariableNames: 'usuario'	classVariableNames: ''	package: 'TP1-UI'!!SesiondeUsuario methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:08'!usuario: unUsuario	usuario := unUsuario  ! !!SesiondeUsuario methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 00:07'!usuario 	^ usuario! !TestCase subclass: #CuooraTest	instanceVariableNames: 'cuoora usuario1 usuario2 topicos topico1 topico2 pregunta1 pregunta2'	classVariableNames: ''	package: 'TP1-Tests'!!CuooraTest methodsFor: 'running' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:18'!setUp 	cuoora := Cuoora soleInstance.	topicos := OrderedCollection new.	usuario1 := cuoora crearUsuarioConNombre: 'usuario1' yEmail: 'usuario1@cuoora.com' yPassword: '1234'. 	usuario2 := cuoora crearUsuarioConNombre: 'usuario2' yEmail: 'usuario2@cuoora.com' yPassword: '1234'.	topico1 := cuoora crearTopicoconNombre: 'topico 1' yDescripcion: 'Descripcion de Topico 1'.	topico2 := cuoora crearTopicoconNombre: 'topico 2' yDescripcion: 'Descripcion de Topico 2'.	topicos add: topico1.	pregunta1 := usuario1 		crearPreguntaParaTopicos:  topicos 		conTitulo: 'Pregunta 1' 		YDescripcion: 'Descripcion de pregunta 1'. 	pregunta2 := usuario2		crearPreguntaParaTopicos: topicos 		conTitulo: 'Pregunta 2' 		YDescripcion: 'Descripcion de pregunta 2.'.	usuario2 agregarSeguido: usuario1.	usuario1 agregarInteres: topico2.! !!CuooraTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 01:45'!testCalcularPuntaje	| puntaje1 puntaje2 pregunta respuesta |	cuoora		crearTopicoconNombre: 'Topico 1'		yDescripcion: 'Descripcion topico 1'.	pregunta := usuario1		crearPreguntaParaTopicos: cuoora topicos		conTitulo: 'Cuales son los puntajes?'		YDescripcion: ''.	puntaje1 := cuoora calcularPuntajeDeUsuario: usuario1.	self assert: puntaje1 equals: 20.	respuesta := pregunta		crearRespuestaDeUsuario: usuario2		conTexto:			'Una pregunta vale 20 puntos, una respuesta vale 50, un dislike resta 5 y un like suma 5'.	puntaje2 := cuoora calcularPuntajeDeUsuario: usuario2.	self assert: puntaje2 equals: 50.	respuesta agregarDislikeDeUsuario: usuario1.	puntaje2 := cuoora calcularPuntajeDeUsuario: usuario2.	self assert: puntaje2 equals: 45.	pregunta agregarLikeDeUsuario: usuario2.	puntaje1 := cuoora calcularPuntajeDeUsuario: usuario1.	self assert: puntaje1 equals: 25.	Cuoora clearSoleInstance! !!CuooraTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:01'!testBuscarTopico	| topicoBuscado topicoVacio|	topicoBuscado := cuoora buscarTopicoConNombre: topico1 nombre.	self assert: (topicoBuscado nombre) equals: 'topico 1'.	topicoVacio := cuoora buscarUsuarioConEmail: 'vacio' yPassword: ''.	self assert: (topicoVacio isNil). ! !!CuooraTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:06'!testGetPreguntasRelevantes	| preguntas1 preguntas2 |	preguntas2 := cuoora getPreguntasRelevantesDeUsuario: usuario2.	self assert: preguntas2 size equals: 1.	self assert: (preguntas2 includes: pregunta1).	self deny: (preguntas2 includes: pregunta2).	preguntas1 := cuoora getPreguntasRelevantesDeUsuario: usuario1.	self assert: preguntas1 size equals: 0.	Cuoora clearSoleInstance.! !!CuooraTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 19:36'!testCrearUsuario	| usuarioAux1 usuarioAux2 |	cuoora := Cuoora new.	usuarioAux1 := cuoora		crearUsuarioConNombre: 'usuario1'		yEmail: 'usuario1@cuoora.com'		yPassword: '1234'.	self assert: cuoora usuarios size identicalTo: 1.	self assert: (cuoora usuarios includes: usuarioAux1).	usuarioAux2 := cuoora		crearUsuarioConNombre: 'usuario2'		yEmail: 'usuario2@cuoora.com'		yPassword: '1234'.	self assert: cuoora usuarios size identicalTo: 2.	self assert: (cuoora usuarios includes: usuarioAux2).	Cuoora clearSoleInstance ! !!CuooraTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 19:51'!testBuscarUsuario	| usuarioBuscado usuarioVacio|	usuarioBuscado := cuoora buscarUsuarioConEmail: usuario1 email yPassword: usuario1 password.	self assert: (usuarioBuscado nombre) equals: 'usuario1'.	usuarioVacio := cuoora buscarUsuarioConEmail: 'vacio' yPassword: ''.	self assert: (usuarioVacio isNil). ! !!CuooraTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/12/2020 19:36'!testCrearTopico	| topicoAux1 topicoAux2 |	cuoora := Cuoora new.	topicoAux1 := cuoora crearTopicoconNombre: 'Topico Auxiliar 1' yDescripcion: 'Descripcion de Topico Auxiliar'.	self assert: cuoora topicos size equals: 1.	topicoAux2 := cuoora crearTopicoconNombre: 'Topico Auxiliar 2' yDescripcion: 'Descripcion de Topico Auxiliar 2'.	self assert: cuoora topicos size equals: 2.	self assert: (cuoora topicos includes: topicoAux1).	self assert: (cuoora topicos includes: topicoAux2).	Cuoora clearSoleInstance ! !TestCase subclass: #PublicacionTest	instanceVariableNames: 'cuoora topicos usuario1 usuario2 usuario3 pregunta1 pregunta2 respuesta1 respuesta2'	classVariableNames: ''	package: 'TP1-Tests'!!PublicacionTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:49'!testAgregarPregunta	| preg1 preg2 topico|	preg1 := usuario2 		crearPreguntaParaTopicos: topicos 		conTitulo: 'Nombre de test en Pharo' 		YDescripcion: 'Que nombre ponerle a los test?'.	self assert: (usuario2 preguntas) size equals: 1.	self assert: ((usuario2 preguntas) includes: preg1).	topico := OrderedCollection new.	preg2 := usuario2 		crearPreguntaParaTopicos: topico 		conTitulo: 'Pregunta con topico vacio' 		YDescripcion: 'Se puede hacer una pregunta sin topico? No deberia'.	self assert: (usuario2 preguntas) size equals: 1.	self deny: ((usuario2 preguntas) includes: preg2).	Cuoora clearSoleInstance ! !!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:55'!testGetRespuestasAPregunta	| respuestas |	respuestas := pregunta1 respuestas.	self assert: (respuestas includes: respuesta1).	self deny: (respuestas includes: respuesta2).	self assert: respuestas size equals: 1.	self assert: (respuestas at: 1) equals: respuesta1.	Cuoora clearSoleInstance ! !!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:00'!testBorrarPregunta	(pregunta1 usuario) borrarPregunta: pregunta1.	self assert: (usuario2 getRespuestas) size equals: 0.	self assert: (usuario1 preguntas) size equals: 0.	Cuoora clearSoleInstance ! !!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:36'!setUp	cuoora := Cuoora soleInstance.	topicos := OrderedCollection new.	topicos add: (cuoora crearTopicoconNombre: 'topico1' yDescripcion: 'Descripcion de Topico 1').	topicos add: (cuoora crearTopicoconNombre: 'topico2' yDescripcion: 'Descripcion de Topico 2').	topicos add: (cuoora crearTopicoconNombre: 'topico3' yDescripcion: 'Descripcion de Topico 3').	usuario1 := cuoora crearUsuarioConNombre: 'usuario1' yEmail: 'usuario1@cuoora.com' yPassword: '1234'. 	usuario2 := cuoora crearUsuarioConNombre: 'usuario2' yEmail: 'usuario2@cuoora.com' yPassword: '1234'. 	usuario1 agregarSeguido: usuario2.	usuario3 := cuoora crearUsuarioConNombre: 'usuario3' yEmail: 'usuario3@cuoora.com' yPassword: '1234'. 	pregunta1 := usuario1 		crearPreguntaParaTopicos:  topicos 		conTitulo: 'Una pregunta' 		YDescripcion: 'Esto es una prueba de una pregunta 1. Andara?'. 	pregunta2 := usuario3		crearPreguntaParaTopicos: topicos 		conTitulo: 'Otra pregunta' 		YDescripcion: 'Esto es una prueba de una pregunta 2. Seguro que anda?'.	respuesta1 := pregunta1 crearRespuestaDeUsuario: usuario2 conTexto: 'Si, creo que si.'.	respuesta2 := pregunta2 crearRespuestaDeUsuario: usuario1 conTexto: 'Si, seguro.'.	pregunta1 agregarLikeDeUsuario: usuario3.	respuesta1 agregarDislikeDeUsuario: usuario1.	usuario2 agregarInteres: (topicos at: 1).! !!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:00'!testBorrarRespuesta	pregunta1 borrarRespuesta: respuesta1.	self assert: (usuario2 getRespuestas) size equals: 0.	self assert: (pregunta1 respuestas) size equals: 0.	Cuoora clearSoleInstance ! !!PublicacionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:36'!testAgregarRespuesta	| respuesta |	respuesta := pregunta1 crearRespuestaDeUsuario: usuario3 conTexto: 'Si, anda el test de agregar respuesta.'.	self assert: ((pregunta1 respuestas) includes: respuesta).	self assert: ((usuario3 getRespuestas) includes: respuesta).	Cuoora clearSoleInstance ! !TestCase subclass: #ReaccionTest	instanceVariableNames: 'cuoora pregunta respuesta usuario1 usuario2'	classVariableNames: ''	package: 'TP1-Tests'!!ReaccionTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ReaccionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:04'!testLikeRespuesta	respuesta agregarLikeDeUsuario: usuario2. 	self assert: respuesta reacciones size equals: 0.	respuesta agregarLikeDeUsuario: usuario1. 	self assert: respuesta reacciones size equals: 1.	respuesta agregarDislikeDeUsuario: usuario1. 	self assert: respuesta reacciones size equals: 1.	self deny: (respuesta reacciones at: 1) like.	respuesta agregarLikeDeUsuario: usuario2.	self assert: respuesta reacciones size equals: 1.	Cuoora clearSoleInstance ! !!ReaccionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:03'!testDislikePregunta	pregunta agregarDislikeDeUsuario: usuario1.	self assert: pregunta reacciones size equals: 0.	pregunta agregarDislikeDeUsuario: usuario2. 	self assert: pregunta reacciones size equals: 1.	pregunta agregarLikeDeUsuario: usuario2. 	self assert: pregunta reacciones size equals: 1.	self assert: (pregunta reacciones at: 1) like.	pregunta agregarDislikeDeUsuario: usuario1. 	self assert: pregunta reacciones size equals: 1.	Cuoora clearSoleInstance ! !!ReaccionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:36'!setUp	| topicos |	cuoora := Cuoora soleInstance.	topicos := OrderedCollection new.	topicos add: (cuoora crearTopicoconNombre: 'topico1' yDescripcion: 'Descripcion de Topico 1').	topicos add: (cuoora crearTopicoconNombre: 'topico2' yDescripcion: 'Descripcion de Topico 2').	topicos add: (cuoora crearTopicoconNombre: 'topico3' yDescripcion: 'Descripcion de Topico 3').	usuario1 := cuoora crearUsuarioConNombre: 'usuario1' yEmail: 'usuario1@cuoora.com' yPassword: '1234'. 	usuario2 := cuoora crearUsuarioConNombre: 'usuario2' yEmail: 'usuario2@cuoora.com' yPassword: '1234'. 	pregunta := usuario1 		crearPreguntaParaTopicos: topicos 		conTitulo: 'Una pregunta' 		YDescripcion: 'Esto es una prueba de una pregunta 1. Andara?'. 	respuesta := pregunta crearRespuestaDeUsuario: usuario2 conTexto: 'Esperemos que si.' ! !!ReaccionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:02'!testDislikeRespuesta	respuesta agregarDislikeDeUsuario: usuario2.	self assert: respuesta reacciones size equals: 0.	respuesta agregarDislikeDeUsuario: usuario1. 	self assert: respuesta reacciones size equals: 1.	respuesta agregarLikeDeUsuario: usuario1. 	self assert: respuesta reacciones size equals: 1.	self assert: (respuesta reacciones at: 1) like.	respuesta agregarDislikeDeUsuario: usuario2.	self assert: respuesta reacciones size equals: 1.	Cuoora clearSoleInstance ! !!ReaccionTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:02'!testLikePregunta	pregunta agregarLikeDeUsuario: usuario1. 	self assert: pregunta reacciones size equals: 0.	pregunta agregarLikeDeUsuario: usuario2. 	self assert: pregunta reacciones size equals: 1.	pregunta agregarDislikeDeUsuario: usuario2. 	self assert: pregunta reacciones size equals: 1.	self deny: (pregunta reacciones at: 1) like.	pregunta agregarLikeDeUsuario: usuario1. 	self assert: pregunta reacciones size equals: 1.	Cuoora clearSoleInstance ! !TestCase subclass: #TopicoTest	instanceVariableNames: 'cuoora topico1 topico2 topicos1 topicos2 topicos3 pregunta1 pregunta2 usuario'	classVariableNames: ''	package: 'TP1-Tests'!!TopicoTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!TopicoTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 23:01'!setUp	cuoora := Cuoora soleInstance.	topico1 := cuoora crearTopicoconNombre: 'Topico 1' yDescripcion: 'Descripcion topico 1'. 	topico2 := cuoora crearTopicoconNombre: 'Topico 2' yDescripcion: 'Descripcion topico 2'.	topicos1 := OrderedCollection new.	topicos2 := OrderedCollection new.	topicos3 := OrderedCollection new.	topicos1 add: topico1.	topicos2 add: topico1.	topicos2 add: topico2.	topicos3 add: topico2.	usuario := cuoora crearUsuarioConNombre: 'usuario' yEmail: 'usuario@cuoora.com' yPassword: '123456'.	pregunta1 := usuario 		crearPreguntaParaTopicos: topicos1 		conTitulo: 'Pregunta relacionada con topicos 1' 		YDescripcion: 'Como se hace para agregar topicos a topicos1?'. 	pregunta2 := usuario 		crearPreguntaParaTopicos: topicos2 		conTitulo: 'Pregunta relacionada con topicos 2' 		YDescripcion: 'Topicos 2 tiene mas de 1 topico?'. ! !!TopicoTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:07'!testAgregarInteres	usuario agregarInteres: topico1. 	self assert: usuario intereses size equals: 1.	usuario agregarInteres: topico2. 	self assert: usuario intereses size equals: 2.	self assert: (usuario intereses includes: topico1).	self assert: (usuario intereses includes: topico2).	Cuoora clearSoleInstance ! !!TopicoTest methodsFor: 'initialization' stamp: 'MariaNoelAdrogueBenas 4/14/2020 18:54'!testGetPreguntasDeTopico	| preguntas |	preguntas := cuoora getPreguntasDeTopico: topico1.	self assert: preguntas size equals: 2.	self assert: (preguntas includes: pregunta1).	self assert: (preguntas includes: pregunta2).	Cuoora clearSoleInstance ! !TestCase subclass: #UsuarioTest	instanceVariableNames: 'cuoora usuario1 usuario2 topicos topico pregunta1 pregunta2 respuesta1 respuesta2'	classVariableNames: ''	package: 'TP1-Tests'!!UsuarioTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!UsuarioTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:20'!setUp	cuoora := Cuoora soleInstance.	topicos := OrderedCollection new.	usuario1 := cuoora crearUsuarioConNombre: 'usuario1' yEmail: 'usuario1@cuoora.com' yPassword: '1234'. 	usuario2 := cuoora crearUsuarioConNombre: 'usuario2' yEmail: 'usuario2@cuoora.com' yPassword: '1234'.	topico := cuoora crearTopicoconNombre: 'topico' yDescripcion: 'Descripcion de Topico'.	topicos add: topico.	pregunta1 := usuario1 		crearPreguntaParaTopicos:  topicos 		conTitulo: 'Pregunta 1' 		YDescripcion: 'Descripcion de pregunta 1'. 	pregunta2 := usuario2		crearPreguntaParaTopicos: topicos 		conTitulo: 'Pregunta 2' 		YDescripcion: 'Descripcion de pregunta 2.'.	respuesta1 := pregunta1 crearRespuestaDeUsuario: usuario2 conTexto: 'Respuesta de usuario2 a pregunta1'.	respuesta2 := pregunta2 crearRespuestaDeUsuario: usuario1 conTexto: 'Respuesta de usuario1 a pregunta2'.! !!UsuarioTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:32'!testGetRespuestas	| respuesta respuestas1 respuestas2 |	respuesta := pregunta2 crearRespuestaDeUsuario: usuario2 conTexto: 'Respuesta de usuario2 a pregunta 2'.	respuestas2 := usuario2 getRespuestas.	self assert: (respuestas2 includes: respuesta1).	self assert: (respuestas2 includes: respuesta).	self assert: respuestas2 size equals: 2.	respuestas1 := usuario1 getRespuestas.	self deny: (respuestas1 includes: respuesta1).	self assert: (respuestas1 includes: respuesta2).	self assert: respuestas1 size equals: 1.	self assert: (respuestas1 at: 1) equals: respuesta2.	Cuoora clearSoleInstance ! !!UsuarioTest methodsFor: 'tests' stamp: 'MariaNoelAdrogueBenas 5/12/2020 20:07'!testAgregarSeguidor	usuario1 agregarSeguido: usuario2.	self assert: usuario1 seguidos size equals: 1.	self assert: (usuario1 seguidos includes: usuario2).	self deny: (usuario2 seguidos includes: usuario1).	Cuoora clearSoleInstance ! !Object subclass: #Cuoora	instanceVariableNames: 'usuarios topicos'	classVariableNames: ''	package: 'TP1-Model'!!Cuoora commentStamp: 'hd 4/13/2020 07:01' prior: 0!| application |application := WAAdmin register: cuoora asApplicationAt: 'cuoora'.application sessionClass: SesiondeUsuario.!!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:13'!getPreguntas 	| preguntas |	preguntas := usuarios flatCollect: [ :each | each preguntas ].	^preguntas! !!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 21:41'!initialize	usuarios := OrderedCollection new.	topicos := OrderedCollection new.! !!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:43'!topicos 	^topicos! !!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 5/11/2020 21:58'!getPreguntasRelevantesDeUsuario: unUsuario	| interesesRelevantes preguntasRelevantes seguidosRelevantes |	interesesRelevantes := unUsuario intereses.	seguidosRelevantes := unUsuario seguidos.	preguntasRelevantes := interesesRelevantes flatCollect: [ :each |  self getPreguntasDeTopico: each ].	preguntasRelevantes addAll: (seguidosRelevantes flatCollect: [ :each |  each preguntas ]).	^ preguntasRelevantes ! !!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:42'!usuarios	^usuarios! !!Cuoora methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:39'!getPreguntasDeTopico: unTopico	| preguntas |	preguntas := self getPreguntas.	^ preguntas select: [ :each | each tieneTopico: unTopico ].! !!Cuoora methodsFor: 'creating' stamp: 'MariaNoelAdrogueBenas 4/13/2020 20:51'!crearUsuarioConNombre: unNombre yEmail: unEmail yPassword: unaPassword	| usuario |	usuario := Usuario conNombre: unNombre yEmail: unEmail yPassword: unaPassword.	self usuarios add: usuario.	^ usuario! !!Cuoora methodsFor: 'creating' stamp: 'MariaNoelAdrogueBenas 4/5/2020 16:04'!crearTopicoconNombre: unNombre yDescripcion: unaDescripcion	| topico |	topico := Topico conNombre: unNombre yDescripcion: unaDescripcion.	self topicos add: topico.	^ topico! !!Cuoora methodsFor: 'finding/searching' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:35'!buscarUsuarioConEmail: unEmail yPassword: unaPassword	| usuario |	usuario := self usuarios		detect: [ :each | each email = unEmail & (each password = unaPassword) ]		ifNone: [ nil ].	^ usuario! !!Cuoora methodsFor: 'finding/searching' stamp: 'MariaNoelAdrogueBenas 4/11/2020 23:04'!buscarTopicoConNombre: unNombre	^ self topicos		detect: [ :each | each nombre = unNombre ]		ifNone: [ nil ]! !!Cuoora methodsFor: 'calculating' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:13'!calcularPuntajeDeUsuario: unUsuario	| puntaje respuestas preguntasDeUsuario preguntasDeOtros totalLikes totalDislikes|	totalLikes:=0. totalDislikes := 0.	preguntasDeUsuario := unUsuario preguntas.	totalLikes := preguntasDeUsuario sumNumbers: [ :each | each likes ].	totalDislikes := preguntasDeUsuario sumNumbers: [ :each | each dislikes ].	preguntasDeOtros := (self getPreguntas reject: [ :each | each usuario = unUsuario ]).	respuestas := preguntasDeOtros flatCollect: [ :each | each getRespuestasDeUsuario: unUsuario ].	totalLikes := totalLikes + (respuestas sumNumbers: [ :each| each likes ]).	totalDislikes := totalDislikes + (respuestas sumNumbers: [ :each| each dislikes ]).	puntaje := (preguntasDeUsuario size * 20) + (respuestas size * 50) + ((totalLikes - totalDislikes) * 5).	^ puntaje! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Cuoora class	instanceVariableNames: 'soleInstance'!!Cuoora class methodsFor: 'instance creation' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:36'!createSoleInstance	| cuoora usuario1 usuario2 usuario3 topico topicos1 topicos2 pregunta1 pregunta2 |	cuoora := self new.	usuario1 := cuoora		crearUsuarioConNombre: 'Pedro'		yEmail: 'pedro@cuoora.com'		yPassword: 'pedro@cuoora.com'.	usuario2 := cuoora		crearUsuarioConNombre: 'Diego'		yEmail: 'diego@cuoora.com'		yPassword: 'diego@cuoora.com'.	usuario3 := cuoora		crearUsuarioConNombre: 'Juan'		yEmail: 'juan@cuoora.com'		yPassword: 'juan@cuoora.com'.	usuario3 agregarSeguido: usuario2.	usuario1 agregarSeguido: usuario3.	topico := cuoora		crearTopicoconNombre: '001'		yDescripcion: 'Topico para preguntas de Orientacion a Objetos 1.'.	topicos1 := OrderedCollection new.	topicos2 := OrderedCollection new.	topicos1 add: topico.	topicos2 add: topico.	usuario1 agregarInteres: topico.	topicos1		add:			(cuoora				crearTopicoconNombre: 'Test de Unidad'				yDescripcion: 'Topico para preguntas relacionadas a tests de unidad.').	topicos2		add:			(cuoora				crearTopicoconNombre: 'Smalltalk'				yDescripcion: 'Topico para preguntas relacionadas a Smalltalk').	pregunta1 := usuario1 		crearPreguntaParaTopicos: topicos1		conTitulo: '¿Para qué sirve el método SetUp?' 		YDescripcion: ''.	pregunta2 := usuario2 		crearPreguntaParaTopicos: topicos2 		conTitulo: '¿Qué significa #messageNotUnderstood?' 		YDescripcion: ''.	pregunta1 		crearRespuestaDeUsuario: usuario2		conTexto: 'Sirve para instanciar los objetos que son evaluados por el test en un único método y que se ejecute siempre antes de cada test.'.	pregunta2		crearRespuestaDeUsuario: usuario1		conTexto:			'Significa que el objeto que recibió el mensaje no encontró ningún método para ejecutar en respuesta.'.	^ cuoora! !!Cuoora class methodsFor: 'instance creation' stamp: 'hd 4/13/2020 11:22'!soleInstance	^ soleInstance ifNil: [ soleInstance := self createSoleInstance ]! !!Cuoora class methodsFor: 'instance creation' stamp: 'MariaNoelAdrogueBenas 4/11/2020 21:21'!clearSoleInstance	soleInstance := nil! !Object subclass: #Publicacion	instanceVariableNames: 'texto usuario fechaCreacion reacciones'	classVariableNames: ''	package: 'TP1-Model'!!Publicacion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:27'!reacciones: unasReacciones	reacciones := unasReacciones ! !!Publicacion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 19:49'!texto: unTexto	texto := unTexto! !!Publicacion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 19:49'!usuario: unUsuario	usuario := unUsuario ! !!Publicacion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 19:50'!fechaCreacion: unaFecha	fechaCreacion := unaFecha ! !!Publicacion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:20'!texto	^ texto! !!Publicacion methodsFor: 'adding' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:10'!agregarDislikeDeUsuario: unUsuario	| reaccion |	self usuario = unUsuario		ifTrue: [ ^ self ].	reaccion := Reaccion dislikeDeUsuario: unUsuario.	reacciones := reacciones reject: [ :each | each usuario = unUsuario ].	reacciones add: reaccion! !!Publicacion methodsFor: 'adding' stamp: 'MariaNoelAdrogueBenas 4/13/2020 23:10'!agregarLikeDeUsuario: unUsuario	| reaccion |	self usuario = unUsuario		ifTrue: [ ^ self ].	reaccion := Reaccion likeDeUsuario: unUsuario.	reacciones := (reacciones reject: [ :each | each usuario = unUsuario ]).	reacciones add: reaccion! !!Publicacion methodsFor: 'initialize' stamp: 'MariaNoelAdrogueBenas 4/5/2020 22:01'!initialize	reacciones := OrderedCollection new! !!Publicacion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:39'!reacciones	^ reacciones! !!Publicacion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 02:52'!fechaCreacion	^ fechaCreacion! !!Publicacion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:39'!usuario	^ usuario! !!Publicacion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/13/2020 20:06'!likes	| likes |	likes:= 0.	reacciones do: [ :each | (each like) 		ifTrue: [ likes := likes + 1 ] ].	^ likes! !!Publicacion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 22:08'!dislikes	| dislikes |	dislikes:= 0.	reacciones do: [ :each | (each like) 		ifFalse: [ dislikes := dislikes + 1 ] ].	^ dislikes! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Publicacion class	instanceVariableNames: ''!!Publicacion class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/5/2020 19:46'!deUsuario: unUsuario conTexto: unTexto	| publicacion |	publicacion := self new.	publicacion usuario: unUsuario.	publicacion fechaCreacion: (DateAndTime date: Date today time: Time now).	publicacion texto: unTexto.	^publicacion! !Publicacion subclass: #Pregunta	instanceVariableNames: 'titulo topicos respuestas'	classVariableNames: ''	package: 'TP1-Model'!!Pregunta methodsFor: 'adding' stamp: 'MariaNoelAdrogueBenas 5/11/2020 22:52'!crearRespuestaDeUsuario: unUsuario conTexto: unTexto	| respuesta |	respuesta:= Publicacion deUsuario: unUsuario conTexto: unTexto.	self respuestas add: respuesta.	^ respuesta! !!Pregunta methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:30'!tieneTopico: unTopico	^ topicos includes: unTopico! !!Pregunta methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/11/2020 19:43'!getRespuestasDeUsuario: unUsuario	^ respuestas select: [ :each | each usuario = unUsuario ]. ! !!Pregunta methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:55'!topicos	^ topicos ! !!Pregunta methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:55'!respuestas	^ respuestas! !!Pregunta methodsFor: 'initialize' stamp: 'MariaNoelAdrogueBenas 4/11/2020 19:22'!initialize 	super initialize.	topicos := OrderedCollection new.	respuestas := OrderedCollection new.! !!Pregunta methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:49'!topicos: unosTopicos	topicos:= unosTopicos! !!Pregunta methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:34'!titulo	^ titulo! !!Pregunta methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:49'!titulo: unTitulo	titulo := unTitulo! !!Pregunta methodsFor: 'deleting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:53'!borrarRespuesta: unaRespuesta	respuestas remove: unaRespuesta	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pregunta class	instanceVariableNames: ''!!Pregunta class methodsFor: 'construc' stamp: 'MariaNoelAdrogueBenas 4/11/2020 19:23'!deUsuario: unUsuario paraTopicos: unosTopicos conTitulo: unTitulo yDescripcion: unaDescripcion	| pregunta |	pregunta := self deUsuario: unUsuario conTexto: unaDescripcion. 	pregunta topicos: unosTopicos.	pregunta titulo: unTitulo.	^ pregunta	! !Object subclass: #Reaccion	instanceVariableNames: 'like fecha usuario'	classVariableNames: ''	package: 'TP1-Model'!!Reaccion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:04'!fecha: unaFecha	fecha := unaFecha ! !!Reaccion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:59'!like: unBoolean	like:= unBoolean! !!Reaccion methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:59'!usuario: unUsuario	usuario:= unUsuario ! !!Reaccion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:57'!like	^ like! !!Reaccion methodsFor: 'accessing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 20:31'!usuario	^ usuario ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Reaccion class	instanceVariableNames: ''!!Reaccion class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:03'!likeDeUsuario: unUsuario	| reaccion |	reaccion := self new.	reaccion fecha: (DateAndTime date: Date today time: Time now).	reaccion usuario: unUsuario.	reaccion like: true.	^ reaccion! !!Reaccion class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:02'!dislikeDeUsuario: unUsuario	| reaccion |	reaccion := self new.	reaccion fecha: (DateAndTime date: Date today time: Time now).	reaccion usuario: unUsuario.	reaccion like: false.	^ reaccion! !Object subclass: #Topico	instanceVariableNames: 'nombre descripcion'	classVariableNames: ''	package: 'TP1-Model'!!Topico methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:11'!nombre: unNombre	nombre := unNombre! !!Topico methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:36'!descripcion	^ descripcion! !!Topico methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:36'!nombre	^ nombre! !!Topico methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:11'!descripcion: unaDescripcion	descripcion := unaDescripcion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topico class	instanceVariableNames: ''!!Topico class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:10'!conNombre: unNombre yDescripcion: unaDescripcion	| topico |	topico := self new.	topico nombre: unNombre.	topico descripcion: unaDescripcion.	^ topico! !Object subclass: #Usuario	instanceVariableNames: 'nombre email password fechaCreacion preguntas intereses seguidos'	classVariableNames: ''	package: 'TP1-Model'!!Usuario methodsFor: 'setting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:15'!fechaCreacion: unaFecha	fechaCreacion := unaFecha ! !!Usuario methodsFor: 'creating' stamp: 'MariaNoelAdrogueBenas 5/11/2020 20:37'!crearPreguntaParaTopicos: unosTopicos conTitulo: unTitulo YDescripcion: unaDescripcion	| pregunta |	unosTopicos isEmpty		ifTrue: [ ^ self ].	pregunta := Pregunta		deUsuario: self		paraTopicos: unosTopicos		conTitulo: unTitulo		yDescripcion: unaDescripcion.	self preguntas add: pregunta.	^ pregunta! !!Usuario methodsFor: 'deleting' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:13'!borrarPregunta: unaPregunta	self preguntas remove: unaPregunta ! !!Usuario methodsFor: 'adding' stamp: 'MariaNoelAdrogueBenas 4/5/2020 17:41'!agregarSeguido: unUsuario	seguidos add: unUsuario.! !!Usuario methodsFor: 'adding' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:23'!agregarInteres: unTopico	intereses add: unTopico! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 04:33'!password	^ password! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 5/11/2020 21:56'!getRespuestas	| respuestas todasPreguntas |	todasPreguntas := Cuoora soleInstance getPreguntas.	respuestas := todasPreguntas flatCollect: [ :each | each getRespuestasDeUsuario: self ].	^ respuestas.! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 17:14'!password: unaPassword 	password := unaPassword ! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/6/2020 20:15'!seguidos	^ seguidos! !!Usuario methodsFor: 'accesing' stamp: 'hd 4/13/2020 08:48'!email	^ email! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 19:34'!nombre	^ nombre! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 21:16'!preguntas	^ preguntas! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/5/2020 17:14'!nombre: unNombre	nombre := unNombre! !!Usuario methodsFor: 'accesing' stamp: 'MariaNoelAdrogueBenas 4/6/2020 20:15'!intereses	^ intereses! !!Usuario methodsFor: 'accesing' stamp: 'hd 4/13/2020 08:48'!email: unEmail	email := unEmail! !!Usuario methodsFor: 'comparing' stamp: 'MariaNoelAdrogueBenas 4/12/2020 03:59'!esSeguible: unUsuario	unUsuario == self		ifTrue: [ ^ false ].	(seguidos includes: unUsuario)		ifTrue: [ ^ false ].	^ true! !!Usuario methodsFor: 'initialize' stamp: 'MariaNoelAdrogueBenas 4/14/2020 18:29'!initialize	preguntas := OrderedCollection new.	seguidos := Set new.	intereses := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Usuario class	instanceVariableNames: ''!!Usuario class methodsFor: 'constructor' stamp: 'MariaNoelAdrogueBenas 4/13/2020 19:28'!conNombre: unNombre yEmail: unEmail yPassword: unaPassword	^ self new		nombre: unNombre;		email: unEmail;		password: unaPassword;		yourself! !